 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
    954 paquetes, esto lo vemos en el numero de secuencia de la captura, la primera columna de esta.
 ** ¿Cuánto tiempo dura la captura?
    La captura dura 56.149345, dato que podemos ver en la segunda columna de la captura(Time), en el ultimo paquete(954).
 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
    La Ip donde se ha efectuado la captura es 192.168.1.34. Se trata de una IP privada, esto lo sabemos dado que hay ciertas IPs reservadas con un determinado rango(192.168.0.0 - 192.168.255.255), y esta pertenece a dicho rango.


3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
    Porcentaje UDP: 96.23%
    Porcentaje TCP: 2.10%
    Es mayor el porcentaje de UDP, y podemos afirmar que es consistente puesto que con una aplicación que transmite 
    en tiempo real, se necesita un intercambio de paquetes mayor, ya que no hay retrasmisiones por los retardos que puedan
    existir en estas aplicaciones y sus implicaciones.

 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
    En la jerarquía de protocolos podemos ver otros protocolos como:
     RTP (Real-Time Transport Protocol), RTCP (Real-Time Transport Control Protocol), IP (Internet Protocol Version 4),
     SIP (Session Initiation Protocol), ICMP (Internet Control Message Protocol), ARP (Address Resolution Protocol), 
    DNS (Domain Name Service), H.261, STUN (Session Traversal Utilities for NAT) y HTTP (Hypertext Transfer Protocol).



4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
    Se envian paquetes SIP en los segundos:
    7.343770-7.567714s, 14.426793s, 14.61053s, 16-16.4s, 38-39.3s, 55.5-55.859934s
 ** Y los paquetes con RTP, ¿cuándo se envían? 
    Se envian mientras ocurre la llamada, entre los segundos 17s y 38.3s aproximadamente.




5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?
    En las primeras cuatro tramas al arrancar Ekiga vemos que se utiliza servicio DNS (Domain Name System). 
    En estas primeras tramas se quiere conocer la dirección IP del servidor ekiga.net.
 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
    La dirección IP del servidor del ordenador que ha lanzado Ekiga es 80.58.61.250
 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
    La dirección IP de ekiga.net que devuelve el servicio de nombres es la 86.64.162.35
 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
    Se pide tambien para 35.162.64.86 debido a que el DNS sigue el método de resolución inversa de un dirección IP
    (resolución DNS hacia adelante), se usa la entrada in-addr.arpa.
    En nuestra captura podemos ver que se pide 35.162.64.86.in-addr.arpa, ya que ésta dirección IP que se pide es la inversa
    de la 86.64.162.35, que es la dirección IP e ekiga.net que nos devolvía el servicio de nombres. 	



6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?
    La URL que está pidiendo la tenemos que ver en el paquete de HTTP que emplea el método GET (GET /ip/ HTTP/1.1). 
    En este paquete nos tenemos que fijar en el campo Hypertext Transfer Protocol donde miramos GET /ip/ HTTP/1.1. 
    Ahora en este campo, en la parte de Full request URI, vemos la URL que se está pidiendo.
    La URL que se está pidiendo es la siguiente: http://ekiga.net/ip/
 ** ¿Qué user agent (UA) la está pidiendo?
    El User Agente que está pidiendo lo podemos ver en el mismo paquete, en User-Agent.
    En este caso el User Agent que la está pidiendo es Ekiga.(ekiga.net)
 ** ¿Qué devuelve el servidor?
    Devuelve 200 OK con la dirección 83.36.48.212.
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
    Recibimos la IP pública que se usará para comunicarse con la privada.



7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
    STUN (Session Traversal Utilities for NAT) es un protocolo de red del tipo cliente/servidor que permite a clientes 
    NAT encontrar su dirección IP pública, el tipo de NAT en el que se encuentra y el puerto de Internet asociado con el
    puerto local a través de NAT. Esta información es usada para configurar una comunicación UDP entre dos hosts que se
    encuentren tras enrutadores NAT.
    SIP utiliza paquetes UDP para la señalización de tráfico de sonido, vídeo y texto sobre Internet, pero no permite
    establecer la comunicación cuando los extremos se encuentran detrás de enrutados NAT. Por ello suele usarse STUN 
    en estas aplicaciones, para poder establecer la comunicación.
    En nuestro caso se emplea porque se quiere saber la dirección IP publica de la máquina con dirección privada, 
    que está dentro de un NAT.
 ** ¿Estamos tras un NAT?
    Si, estamos tras un NAT,ya que si no este protocolo (STUN) no seria necesario.



8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
    En la trama 46 podemos ver cuál es la dirección IP que tiene el servidor Registrar, ya que la máquina 192.168.1.34 
    envía la trama con método REGISTER al servidor Register.
    La dirección IP del servidor Registrar es: 86.64.162.35
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
    Los paquetes SIP se envían al puerto 5060 del servidor Registrar. 
    Esto se ve en el campo User Datagram Protocol, en Destiation Port.
 ** ¿Qué método SIP utiliza el UA para registrarse?
    El método que utiliza el User Agent para registrarse lo podemos ver en la trama 46, en el campo Session Initiation
    Protocol, en Request-Line, en Method. En nuestro caso este método es el método REGISTER.
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
    En la trama 46, en el campo Session Initiation Protocol, en Message Header, en Allow podemos ver los métodos de SIP 
    que entiende el User Agent. 
    En nuestro caso vemos que los métodos que entiende el UA son: INVITE, ACK, OPTIONS, BYE, CANCEL, NOTIFY, REFER, MESSAGE.



9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?
    En la trama 50 podemos ver que se envía una respuesta de 401 Unauthorized. Este mensaje aparece porque el cliente 
    se debe identificar para que se pueda registrar con éxito.
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
    Cuando recibimos un 200 OK, sabemos que se ha realizado correctamente.
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? 
    (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
    Podemos ver que se diferencian por el tamaño, en el primer REGISTER se envían 523 bytes, mientras que en el segundo se
    envían 712. Esto se debe a que en el segundo intento se incluye el campo sip.Authorization. 
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
    El valor del tiempo de expiración de la sesión es 3600 segundos, esto lo vemos en el campo Message Header, Expires.


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
    Si, esto puede verse en la trama de INVITE, en el campo de Session Initiation Protocol, en Message Header, 
    en el campo From. En este caso: Nombre : \"Gregorio Robles\"   Dirección SIP: sip:grex@ekiga.net
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
    El contenido de la trama lo vemos en el campo Session Initiation Protocol, en Message Body. 
    En este campo podemos ver que se emplea el protocolo SDP (Session Description Protocol). 
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
    No, el primer intento de INVITE no tiene éxito. Esto lo vemos en la trama 85, en la que el servidor envía un 
    mensaje de 407 Proxy Authentication Required. 
    Esto se debe a que el servidor proxy requiere que se autentifique, ademas podemos ver como se envía otro INVITE.
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
    En el segundo INVITE podemos ver que el tamaño del paquete es mayor (1181 bytes) respecto al primer intento (744 bytes).
    El paquete es mayor debido a que en el segundo intento se incluye el campo sip.Proxy-Authorization. 
    Campo necesario para poder establecer la conexión. De esta forma la conexión se establecerá con éxito.


11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
    Podemos ver en las tramas siguientes que se utilizan los protocolos: RTP, H.261, RTCP y ARP.
    
    RTP: El protocolo RTP (Real-time Transport Protocol) es un protocolo de nivel de sesión utilizado para la transmisión 
    de información en tiempo real, como por ejemplo audio y vídeo en una video-conferencia.
    H.261: Funciona sobre RTP y permite la compresión de audio, video, videoconferencias.
    RTCP: El protocolo RTCP (Rel-time Transport Control Protocol) es utilizado para enviar datos de control entre el emisor
    y receptor de una secuencia RTP. Los paquetes RTCP son enviados aproximadamente cada cinco segundos, y contienen datos
    que ayudan a verificar las condiciones de transmisión en el extremo remoto. 
    ARP: El protocolo ARP (Address Resolution Protocol) es un protocolo de comunicaciones de la capa de enlace de datos,
    responsable de encontrar la dirección de hardware (Ethernet MAC) que corresponde a una determinada dirección IP. 
    Para ello se envía un paquete (ARP request) a la dirección de difusión de la red (broadcast, MAC = FF FF FF FF FF FF) 
    que contiene la dirección IP por la que se pregunta, y se espera a que esa máquina (u otra) responda (ARP reply) con 
    la dirección Ethernet que le corresponde. Cada máquina mantiene una caché con las direcciones traducidas para reducir 
    el retardo y la carga. ARP permite a la dirección de Internet ser independiente de la dirección Ethernet, pero esto 
    solo funciona si todas las máquinas lo soportan.
 ** ¿Cuál es el tamaño de paquete de los mismos?
    El tamaño de los paquetes RTP es de 214 bytes, para RTCP de 102 bytes y el tamaño de H.261 es variable.
 ** ¿Se utilizan bits de padding?
    No se utilizan bits de padding, ya que se puede ver en la trama, en el campo Padding aparece False(a cero).
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
    La periodicidad de los paquetes que se envían la podemos comprobar en el campo timestamp.
    Para poder calcular esta peridiocidad tenemos que tener en cuenta que se transmite a 64kb/s, además conocemos el
    timestamp (160), es decir, que mandaremis 50 paquetes de 1280 bits por segundo.
    Es decir, el periodo será 1/50, que es 0.02 segundos.
 ** ¿Cuántos bits/segundo estamos enviando?
    Se transmite a 64kb/s, por tanto estamos enviando a 64000 bit por segundo.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]






12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?
    Para poder ver los flujos RTP vamos a Telephony, pinchamos en la opción RTP y ahí en Show all streams. 
    Podemos ver que hay dos flujos, esto se debe a que uno es un flujo de audio y otro de vídeo-
 ** ¿Cuántos paquetes se pierden?
    Para ver cuantos paquetes se pierden; en Show all streams, en el campo Lost. 
    En este caso vemos que no se pierde ningún paquete ya que marca 0.0%.
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
    Para uno de los flujos es 1290.479 ms y para el otro 1290.44 ms
    El valor del delta muestra el retardo.
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
    Primer flujo: Max 183.10 ms; Media 153.24 ms
    Segundo flujo: Max 119.64 ms; Media 42.5 ms
    Esto determina la variación temporal que experimenta el retardo en una transmisión de paquetes entre los puntos inicial
    y final de la comunicación.
    Para que una conversación sea de de calidad no debemos tener un valor muy alto ya que esto implicaría recibir los
    paquetes tarde, algo que no concuerda con lo que tratamos como calidad. 
    En este caso no tenemos demasiada calidad ya que si tenemos un jitter de 150 ms de ida y suponemos el mismo de vuelta 
    ya estaríamos cubriendo los 300 ms que asumimos en una conversación de calidad.



13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
    El valor del delta y el jitter del primer paquete que ha llegado lo vemos en Telephony, RTP, Stream Analysis, 
    y ahí vemos estos en Delta(ms) y Filtered Jitter(ms). 
    En nuestro caso el valor de delta es 0.00 ms, y el valor del jitter tambien es de 0.00 ms. Ambos nulos.
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
    Si, lo podemos saber, mediante el número de secuencia, y el marker del paquete RTP, que es TRUE. Esto nos indica que 
    es el primer paquete RTP de la comunicación.
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
    Los valores de jitter son menores de 10ms hasta el paquete 247.
 ** ¿A qué se debe el cambio tan brusco del jitter?
    El cambio tan brusco del jitter debido al aumento en el retardo, y a su vez una disminución en el ancho de banda.
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
    Si, es comparable, ya que como hemos visto anteriormente el jitter varía en función del valor de la delta, que 
    nos da la diferencia de tiempo entre el envío de un paquete y el anterior. En este caso al tener un aumento 
    considerable de la delta el paquete llegará mucho más tarde comparado con los paquetes enviados con anterioridad.
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
    La dependencia entre el tiempo transcurrido desde el paquete anterior y el valor del jitter es la variabilidad 
    del retardo. Esto se debe a que cuando uno aumenta bruscamente lo hace el otro también.



14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
    Al mirar en nuestra captura; en Telephony, VoIP calls, en Graph o Flow, podemos ver los instantes de tiempo en los 
    que comienza y termina la conversación, fijandonos en el campo Time.
    En nuestro caso la conversación comienza en el segundo 14,426793, y termina en el segundo 39,229683. Es decir, 
    la conversación dura 24,80289 segundos (39,229683 - 14,426793).
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
    Tenemos varios paquetes SSRCs porque tenemos dos flujos: uno de audio y otro de vídeo.
    Los SSRCs los vemos en las tramas en Synchronization Source Identifier.
    En los paquetes de G.711 (paquetes de audio) vemos que nos encontramos con: 
    Synchronization Source identifier: 0xbf4afd37 (3209362743), por lo que en este caso el SSRC es 0xbf4afd37 (3209362743).
    En los paquetes de H.261 (paquetes de vídeo) observamos que tenemos: 
    Synchronization Source identifier: 0x43306582 (1127245186), es decir, el SSRC será 0x43306582 (1127245186).

    Para poder ver si hay CSRCs tenemos que mirar en el campo Contributing source identifiers count, que aparecerá con 
    valor cero si no hay CSRCs y con otro valor si existe CSRC. Si no hay CSRC quiere decir que nuetsros SSRCs no pasan por
    mezcladores. 
    En RTP vemos que encontramos el campo Contributing source identifiers count a cero, es decir, no hay CSRCs. 
    En paquetes de RTCP se ve que el campo de CSRC aparece a uno.



15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
    El método SIP que se utiliza para finalizar la conversación es BYE.
 ** ¿En qué trama(s)?
    Este método BYE de SIP se envía en las tramas: 924, 925, 927 y 933.
 ** ¿Por qué crees que se envía varias veces?
    Vemos que se envía varias veces porque aún el servidor no ha enviado un 200 OK. 
    Esto se debe a que RTP emplea UDP, que es un protocolo no fiable, entonces se envían varias veces estas tramas 
    para asegurarse de que llega el mensaje al otro extremo, es decir, se emplea la retransmisión para mantener fiabilidad.



16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
    Aparece una instrucción SIP del tipo REGISTER en el final de la comunicación porque el usuario quiere darse de baja,
    es decir, que el servidor le borre de la lista y terminar la sesion, para esto el campo expires tiene que ir con 
    valor 0.
 ** ¿En qué trama sucede esto?
    Vemos que ell método REGSTER se envía en las tramas 950 y 952, se envía dos veces, ya que en el primer envío el 
    servidor contesta 401 Unauthorized, ya que el usuario no ha incluido la información de autorización. Por esta razón 
    se envía un segundo REGISTER, en el que si se incluye dicha información, y por lo tanto el servidor responde con un 
    200 OK.
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
    La diferencia entre la instrucción que se realizó al principio de la sesión y la instrucción de ahora, del final 
    de la sesión es el valor del campo Expires. En el inicio de la sesión el campo Expires tiene un valor de 3600 segundos,
    y en el final de la sesión tiene un valor de 0 (para poder terminar la conexión).



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
 ** ¿Son diferentes el registro y la descripción de la sesión?










18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
 ** ¿Cuál es su periodicidad?
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
